%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 378.000000 67.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.4 (Build 19E287) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 378 67
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 378 67
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /one put
dup 34 /zero put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



00>] def
/CharStrings 4 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/uni20BE 3 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4445087 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB2878974AB253FC8F6E50D35D384423D89D255799B15B5BC324012A3E29641C53AFCB989BFE3EFE58F4AD7636495D4833DF4343BE5B6FF982EC613AE5ED7480058029BC9DBDF2766B24BCDFF664C494BDC2E4A0941BA400C0A8A3615B85B6AC43AE3DE9457C80BF352641E9F20E0BA34C7655F04A24B4987C34AD9A933264FC16EDA3F37E717F88C7E07610E1C8E45D69FE8DD73C45A780207AFF236F6DFCC774C3DBDE3E2EE157B152069DDECA5E22AC710375D6330A418599EDDB74257788D5D98E28B768D353418D4FAA89F4BEC976D911FCCF01CD2757A720245DBA78DEE6E585A70E2B74D4D0BBAAC43D72E32EB0092380B4CE4174A8E80A730B08A3E00AB2883E0E5304B20C7946C6D1C6E24A5B4620C1D777BE587B3E4F25B86DF40F3DDE0C83C6863395F78CADE34695DBC3F7669EBA95DB758138E286F04F43B873EE26BC439B23CBC00643B7E3BB96E034B49593E9ABE15B477DB913167CA6B43525A6A608A5A2AC7ED60CF8CD2B0432A9A700D9E7D078AE31A68B111D6173DC81D97989E609A738C452126703F9A2AF29F1B2186E0BF62EDFC673A170FC1BEEFEAB6605AB3865F7DB2E811CC2A3CA39CE3069776B837B248C68CB53095F955A8D4BA0536F899E60E52F1D8C71CEE95A18DD8E92552F0408B07F8488332F66434FE74D6C2AFFD6350235D353D71B8060DC6616693F6EE53B08BC06B6D325602EA138982DE3469DFCE15FF8273903FE3188F62F5AB2E996DDA23C51600F90298DC31AE2475CBFF
DD8C0FA3AFEB38181415941F0C7D9E51BB6EDCEB17F37F4E05D10F3F91AF71001F43380AF4041608FCE61365D0C171F47BD608BDB7E3E669E8A838BAC24D3DDE01B86CC102A74022CE4C651F83602D9E3D0D3194ABFC10C998C495858C225D1A34D6A1C7350D440CDCC5A0F93BB06974DA69407399848513BA926C7AF1523FC509B349513E0F698066F368501D59C4BA18204C60AA40255F8B7E645F1E68547D3A020216702CD1A9A4F54D6D15626CA6AAA111DEAA97785395668EC4737A9095E0B9D5E5A8F09373D2920C80CACCB3431E8EBB3A0AB222CF3C3BDF6BC8F580503DDF00852EA5F18CD62EEC67E22062EA05E8C82EED0EEF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 378 67 rc
330 65.799995 m
377 65.799995 l
377 18.799997 l
330 18.799997 l
h
330 65.799995 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
239 135.2 m
286 135.2 l
286 182.2 l
239 182.2 l
h
239 135.2 m
S
/Cs2 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
258.052 164.476 m
(!)s
/Cs1 SC
1 1 1 sc
CM
330 18.799997 m
377 18.799997 l
377 1.299998 l
330 1.299998 l
h
330 18.799997 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
239 182.2 m
286 182.2 l
286 199.7 l
239 199.7 l
h
239 182.2 m
S
0 i
1 1 1 sc
CM
283 65.799995 m
330 65.799995 l
330 18.799997 l
283 18.799997 l
h
283 65.799995 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
192 135.2 m
239 135.2 l
239 182.2 l
192 182.2 l
h
192 135.2 m
S
/Cs3 SC
0 sc
0 i
211.052 164.476 m
(")s
/Cs1 SC
1 1 1 sc
CM
283 18.799997 m
330 18.799997 l
330 1.299998 l
283 1.299998 l
h
283 18.799997 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
192 182.2 m
239 182.2 l
239 199.7 l
192 199.7 l
h
192 182.2 m
S
0 i
1 1 1 sc
CM
236 65.799995 m
283 65.799995 l
283 18.799997 l
236 18.799997 l
h
236 65.799995 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
145 135.2 m
192 135.2 l
192 182.2 l
145 182.2 l
h
145 135.2 m
S
/Cs3 SC
0 sc
0 i
164.052 164.476 m
(")s
/Cs1 SC
1 1 1 sc
CM
236 18.799997 m
283 18.799997 l
283 1.299998 l
236 1.299998 l
h
236 18.799997 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
145 182.2 m
192 182.2 l
192 199.7 l
145 199.7 l
h
145 182.2 m
S
0 i
1 1 1 sc
CM
189 65.799995 m
236 65.799995 l
236 18.799997 l
189 18.799997 l
h
189 65.799995 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
98 135.2 m
145 135.2 l
145 182.2 l
98 182.2 l
h
98 135.2 m
S
/Cs3 SC
0 sc
0 i
117.052 164.476 m
(!)s
/Cs1 SC
1 1 1 sc
CM
189 18.799997 m
236 18.799997 l
236 1.299998 l
189 1.299998 l
h
189 18.799997 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
98 182.2 m
145 182.2 l
145 199.7 l
98 199.7 l
h
98 182.2 m
S
0 i
1 1 1 sc
CM
142 65.799995 m
189 65.799995 l
189 18.799997 l
142 18.799997 l
h
142 65.799995 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
51.000004 135.2 m
98 135.2 l
98 182.2 l
51.000004 182.2 l
h
51.000004 135.2 m
S
/Cs3 SC
0 sc
0 i
70.052002 164.476 m
(!)s
/Cs1 SC
1 1 1 sc
CM
142 18.799997 m
189 18.799997 l
189 1.299998 l
142 1.299998 l
h
142 18.799997 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
51.000004 182.2 m
98 182.2 l
98 199.7 l
51.000004 199.7 l
h
51.000004 182.2 m
S
0 i
1 1 1 sc
CM
94.860001 65.799995 m
141.86 65.799995 l
141.86 18.799997 l
94.860001 18.799997 l
h
94.860001 65.799995 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
3.8600035 135.2 m
50.860004 135.2 l
50.860004 182.2 l
3.8600035 182.2 l
h
3.8600035 135.2 m
S
/Cs3 SC
0 sc
0 i
22.912004 164.476 m
(")s
/Cs1 SC
1 1 1 sc
CM
94.860001 18.799997 m
141.86 18.799997 l
141.86 1.299998 l
94.860001 1.299998 l
h
94.860001 18.799997 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
3.8600035 182.2 m
50.860004 182.2 l
50.860004 199.7 l
3.8600035 199.7 l
h
3.8600035 182.2 m
S
0 i
1 1 1 sc
CM
48.000004 65.799995 m
95 65.799995 l
95 18.799997 l
48.000004 18.799997 l
h
48.000004 65.799995 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
-42.999996 135.2 m
4.0000033 135.2 l
4.0000033 182.2 l
-42.999996 182.2 l
h
-42.999996 135.2 m
S
/Cs3 SC
0 sc
0 i
-23.947996 164.476 m
(")s
/Cs1 SC
1 1 1 sc
CM
48.000004 18.799997 m
95 18.799997 l
95 1.299998 l
48.000004 1.299998 l
h
48.000004 18.799997 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
-42.999996 182.2 m
4.0000033 182.2 l
4.0000033 199.7 l
-42.999996 199.7 l
h
-42.999996 182.2 m
S
0 i
1 1 1 sc
CM
1.0000036 65.799995 m
48.000004 65.799995 l
48.000004 18.799997 l
1.0000036 18.799997 l
h
1.0000036 65.799995 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
-90 135.2 m
-42.999996 135.2 l
-42.999996 182.2 l
-90 182.2 l
h
-90 135.2 m
S
/Cs3 SC
0 sc
0 i
-70.947998 164.476 m
(!)s
/Cs1 SC
1 1 1 sc
CM
1.0000036 18.799997 m
48.000004 18.799997 l
48.000004 1.299998 l
1.0000036 1.299998 l
h
1.0000036 18.799997 m
f
56 0 0 9 20 6 cm
BI
/Width 168
/Height 27
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
JcCH(rdY!`!PcC#s,6o.s+ULPJ,m=b^V>@"MuSA.L&_.&!5AQL^OcECs4%)Jc2Ja_K`7Y8VuGe/s3UfF
J,m=b^V>@"VZ6Y]rg3Ujr`T5frr2]meGoNAli@"crl9Tid/X)q!5AQL^OcEas8Kb3)?+.F`W"Nh&cRIY
s4%)JGQ'T$JbY!!KDl)SJq<sHs8INK^B)*aJcDhOrmUiLrc7o9rmUiHr^utceGoMBrknF/rcS39rr.KK
c2[cn!5AQL^OcEgs8N#s4oPffoD&@bR/YJ-s4%)Jao;)1s8K,!./rafs2tB@J,m=b^V>@"YQ+UJrW)pu
rr;u`ro!8Fo)J^ermUkrrq#1MrpB\'rm?;sa8c-h!5AQL^OcF-s8M?`b5UK$rUU!fUAb/lC&Up-=oMD"
1&dU6s7lWnlMaf_$2X`%!rbgkcftK/AH$%hs2=s:J,m=b^V>@"d/X*CrZV%:rYkcgrr)Wlrc\/=rj_k*
ri,ksrgNW^qu?ZTrYPQ$rilCprm:X2rW)p/rlOX/rnRJRrk3m_`;fge!5AQL^OcF6s8I?D$iYn[gA^L=
S,N]m!<-7&r;6NnGQ%UA7JQo^rr*o:'_q_*s8GXi-iWc5s8Min0`D(O%fYbas8IBE!WMV?s2=s:J,m=b
^V>@"f)Pa-rW<(hp&G#kqZ-V@qu?Y_rW)q?p&G"QrW)r[qu?Zqrr2lsr[e'+p&G#gqZ-Vno)J\:rYL.c
_>jLb!5AQL^OcF9s8K,!!<//Ss8N#s-iO,F-i<rC\c)U.E:s814T5?[i;<QRs8N#p!<,sjs8LjO!<-R&
s8MQf!WFBrs2"a7J,m=b^V>@"f)P`2rW)p!rmLK>ra#C$roF(Yrpft#r^QS\rZM1ErqlTmrr;usqZ-V+
p&G$PqZ-Udp&G$?rW)pQJcERdrdY!`!PcC#s475LU&G&k"TI?Ps8HR+!<1(:s8IlS"ocR>s8K;&!<.TF
s82iq]`+;tme-VZ]DDU-E:s81f)>[K5_8sOs8INK^B)*aJcF=$rq68Trk\1*r]C)ZrWN5equ?Zmrc\8R
rau.?rXJjSrquQkk5YEgqZ-W;o)J^+roo"6_>jLb!5AQL^OcF$s8LmS!WE)u8b2o\iVp"Z\Gkdas69R_
ec#gQ!<-S]s/H%tJ,m=b^V>@"_>jL>rW)p*rn?!(m/R(\r\+6Nr]C,PJcD_LrdY!`!PcC#s2=s:WVuns
"TGLPs6TdbFT):>3r\]$s/,hqJ,m=b^V>@"a8c/!rXo,3ri+<Fn,NB^rW3!grpt^@U]:=D!5AQL^OcF-
s8MTg1&_LYZ-NC?s8KS."o_g,qLS[>s8INK^B)*aJcF!prqcU^rY#4LbQ%88rlk?Mrbh`7q#C>mr`asR
XT/9M!5AQL^OcF3s8N#s>5fB<eFik@.fS,Ts7lWnh#8)gFn5S3ErL03s/c8"J,m=b^V>@"d/X)drYtji
p&G$ZrWN5lgAh'MrosD+rZ(U%rgNhDrYPR)JcDhOrdY!`!PcC#s3q#INW&qWHha02SGnfQ=oKGns8N&t
rr+b:!<1#is/c8"J,m=b^V>@"f)P`prW26`r^YT?rr;usj$s%?JcDhOrdY!`!PcC#s475LXl`+PR+M@g

~> %APLeod
EI
9 0 0 9 114 6 cm
BI
/Width 27
/Height 27
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
YlCs-YlE,Nrce@"rlG)krkJGmrd+8;dJs1ho`4t*rknF/dJs1er`oFkra#MbrpoX[dJs1hrqPXUdJs1h
rqQKmrpf@To)J^ermUkrrq#LVrZ(oRr\"17r[n+nrqc<fq#C?Yr`/q(qZ-Tsr_!19o)J\:rdXqFrr;uU
rY,96rr2]mqu?ZTrYPQ$rilCprm:X2rW)p/rlOj5rq5sarbMK5rk\C0qu?Xfr[7^;q#C?hr\4<OrXSqm
qu?Z[rn6uErfI*ZrdjkErr;usrW)pKrnmDKrhfPmrhoYnr]:#drp0@Zrf[6\rc@l7rr;urqZ-Upp&G$I
qZ-V,qu?XMr[n-Dq#C>&rW)r!q#C?nrr)]orab^%roEqVr^cqdrfI+9rq?6hrmq&Xr]U8Yq#C6krk/5t
rpKIZrk&%-rc%Z4rc7u\ral(>rXf'4rp'1Vk5YEgqZ-W;p&G$NrilC-ro3DHl2Ub5rWiE&ras[[m/R(\
r\+6Nr]C,PeGnn8rcJ,>r]:&LdJr\8rhKGnr^ZtZcN!J8rji"3ra#O"bQ%88rlk?Mrbh`7q#C>mr`e"S
q#C?KrYGKUo)J]0rcHclqu?Z[rZ_=]opu)Nreg[krgh[@rr;usr\Wa;rl<Xjrr;urj$s%?fDg@
~> %APLeod
EI
9 0 0 9 161 6 cm
BI
/Width 27
/Height 27
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
YlCs-YlD]Brr)gsrgEHZ`W,pnrW)qOp&E,5rlY3ArW)qOp&E58rq$+=rg3Tare:%FbQ%QKrepcurW)qO
p&FL\rp0R+roF(Wm/R'_r^HhcrlY3?re:%Fp&G#hrZV%:rYkcgrr)Nirnm]#roa:\rlY3?re:%Fq#C>>
rX8^[rn@A=rgWlmrW)q&rquZnrquaWrj;S&rlY3?re:%Fqu?ZRrW<(hp&G#kqZ-V@qu?YFrbhN2rlY3?
re:%Fqu?YsrW)q\p&G$jr[7[Fr[7UCr\+6ap_s,DrW)p&rYkdIqu?QnrfI*ZrW<)Ip&G"sqZ-WVn,NBd
rW)qOp&Fphrh9;krWN5Yp&G#%qZ-W:n,NBLrW)q7p&Fphrq68Trk\1*r]C)ZrWN5ep&G#krYthIrXo,>
rYkdOqu>gYrndVTrW)phfDk"5r`oF&rX8_ZfDk+8ri,ksrWN5%eGnn8ro<tirWE/!dJr\8rpp%CrX&S/
cN!J8rqcU^rY#4LbQ%88rr2n#rYYXap&G"@rn6$*p&G#4rYtjip&G$ZrWN5lgAgsJrf-mWrd4F2rg`tQ
r`T4@fDkaJrm(KDklC]QfDkaJriP<Prg;=;J,
~> %APLeod
EI
9 0 0 9 208 6 cm
BI
/Width 27
/Height 27
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
YlCs-YlE#KrnIF=r`B)*rf7!Kp&EG>rf6strilC\ric;<rYPReq#AbArY5>Mrq60gre^USrabg(dJs2A
rZV:7qu?YUrW)q+q#AY>rr2]mr]L/[rj_b'n,NCQrlY6$rr)*]rq-3?rau-:rf?aPp&G#hrZV%:rYkcg
rr)<cra#LerW<'crm^W@q#C>>rX8^[rn@A=rgWlmrW)q&rqu-_rnm]?rW3"kq#C6kro!bWrg`Z]ri5hq
rd!c.ri5qtrWiGuqu?QnriH)!rfZsSrr2mErW)pFqu?Z4r]'n`q#C?aqZ-WNqu?QnrfI*ZrW<)Ip&G"s
qZ-WVrr;t>rW)q#q#C?UqZ-Wbqu?Qnrh9;krWN5Yp&G#%qZ-W:rr;u0rW)r+q#C>CrW)q#q#C6krq68T
rk\1*r]C)ZrWN5equ?YcrZ(o<rdFcGrWN47rq-!ck5YG;rW2uur^le_rqHE5rhob-roiqQk5YEcrW)p*
rn?!(l2Ua^rW)p#riFWLm/R(FrXo,3ri+<Fn,NCXr\=BYriscKo)J^cr^?_url*(\p&G$jr`]:<rm^W@
r[Rp#gAgjGrcA&Xrn6uErpKagrq"kDq#C>QrW)qEpmqDSrg!IcrZ0Vjqu?Z@rW26`r^YT?qu?Ytk!o?;
fDg@
~> %APLeod
EI
9 0 0 9 255 6 cm
BI
/Width 27
/Height 27
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
YlCs-YlE#Krlb:_r_NN@rkSO/p&EG>rf6t#rg3Vsrd+PHr[.X,q#AkDrnRJVrm:H?rd4VEr^Zb`eGoN@
rW)piq#C?ErW)p'rqlTmeGoNorZM3!q#C?grW2uurq?6hn,NCQrlY6$rr(dTrj)M'r]9iSp&G#hrZV%:
rYkcgrr)*]rq-1=rWN5Hq#C-hrd+POreCF+rpB]SrWrK'r`oI#n,NCcr`9"+rjMM"qu?ZRrW<(hp&G#k
qZ-V@o)J^fra,RDrlam4qu?YsrW)q\p&G$jr[7[Fr[7C=rqub"r]:&Bqu?YBrq?6hqu?YWrW)p!rmLK>
ra#C$roEtVrquatr`B*oqu?ZerY>5.qu?YhrW)p#ro!JLrabm+rlG*=rql[qrW)pKq_%k!rYb\kq#C6k
rq68Trk\1*r]C)ZrWN5err;tjli@#jq#BLVrndVTrW)phfDk"5r`oF&rX8_ZfDk+8ri,ksrWN5%eGnn8
ro<tirWE/!dJr\8rpp%CrX&S/cN!J8rqcU^rY#4LbQ%88rr2n#rYYXap&G"@rn6$*p&G#4rYtjip&G$Z
rWN5lgAgsJrf-mWrd4F2rg`tQr`T4@fDkaJrm(KDklC]QfDkaJriP<Prg;=;J,
~> %APLeod
EI
9 0 0 9 302 6 cm
BI
/Width 27
/Height 27
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
YlCs-YlDfErpp&)rk7n&dJs4@rbh^5rX\u.rg!'SdJs4Erhob2rhfYprg!'SaT)7@rW)q_o)Hf2riH)!
rg!'Sn,NCbrmUkrrq#:PriH)!rg!'Sp&G$Vr`/q(qZ-Tsr_!19m/R'drW)q_o)JLbro3nnr^6[hrq69;
r^-SarXf(Nn,NBgrW)q_o)JLbr_!/;rq-!crqZOIrW)p-rp'(SriH)!rg!'Squ?ZnrW)pKrnmDKrhfPm
rho>eriH)!rg!'Squ?ZgqZ-Upp&G$IqZ-V,o)J]jrW)q_o)JUerqZEkrab^%roEqVr^cV[rf-mWrc[l4
q#C?+rg<]Qp&G$'qZ-V7q#C=FrYthIrY#2?rYb\Yq#BCSra>U'rlNmok5YG2rWiE&rasd^l2UbYr\+6N
r]C,PfDk+8rcJ,>r]:&LeGnn8rhKGnr^ZtZdJr\8rji"3ra#O"cN!J8rlk?Mrbh`7q#C>mr`e+Vp&G$H
rYGKUo)J]0rcHloq#C?XrZ_=]opu)Nreg[krghdCqu?Zor\Wa;rl<amqu?Zij$s%?gAc[
~> %APLeod
EI
9 0 0 9 349 6 cm
BI
/Width 27
/Height 27
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
YlCs-YlE#KroX3-r_i`$rg`ubp&EG>ro3ngrbVS`rk/4ar]'oKq#AkDrr2mcr]0cRrn@>VregLNeGoNo
rW)qIp&G"FrZh4<eGoN6rW)qkp&G"jrW)rbqu?-brp0R+roF(Wo)J]+rW)r"p&G"srW)rUqu??hrho`=
p]1:3re(4Kq#C>%rW)r%p&G#"rW)rKqu?Hkrd+POreCF+rpB]SrWrK'r`oI#qu?Y+rW)r#p&G"krW)rI
qu?Qnro!bWrg`Z]ri5hqrd"D@rcA&=ri,Sjr^HedrnRDNqu?YsrW)q\p&G$jr[7[Fr[7UCrh]SorfHgQ
r\aZVrqH<iqu?YWrW)p!rmLK>ra#C$roF(Yro*hYrakd&rZ(nmq#C6krh9;krWN5Yp&G#%qZ-W:qu?Y@
rWW;Nqu?Z!rW<);q#C6krq68Trk\1*r]C)ZrWN5equ?Zkr_*52rcnEQrXf'fp&F1SrndVTrW)pho)J^=
ri5t)roWeOk5YEcrW)p*rn?!(l2Ua^rW)p#riFWLm/R(FrXo,3ri+<Fn,NCXr\=BYriscKo)J^cr^?_u
rl*(\p&G$jr`]:<rm^W@r[Rp#gAgjGrcA&Xrn6uErpKagrq"kDq#C>QrW)qEpmqDSrg!IcrZ0Vjqu?Z@
rW26`r^YT?qu?Ytk!o?;fDg@
~> %APLeod
EI
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 91 201 cm
-90 182.2 m
-42.999996 182.2 l
-42.999996 199.7 l
-90 199.7 l
h
-90 182.2 m
S
ep
end
